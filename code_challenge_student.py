# -*- coding: utf-8 -*-
"""Code_Challenge_Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Buk9_ZJFp8LY94hyWD8mWdpSFvZa0Mfi

#Data Bootcamp Selection Challenge
#####In this challenge you will calculate various KPIs using a car based dataset, each question will have a single correct answer that will be evaluated through automated unit testing. Use the dictionary provided below to fill in your answers, each question will state the format required for the answer and examples are provided so you know how properly fill the answer dictionary. 
#####**Use the dataset "as is" and do not perform any data cleaning or modify it in any way, doing so could make you answer all your questions incorrectly. Do not modify the structure of the answer dictionary.**

#####When you finish this challenge please upload both your notebook and your answer dictionary in pickle format to a public github repository submit their URL to the [google form](https://forms.gle/wWysZEMkoZsjB11Y7) that was provided to you.

##### Some unit tests are provided at the end of this notebook to help you verify your answers are in the correct format, however they will not test everything.
"""

#Use this dictionary to store your answers in the correct format in the cells below , do not modify the keys
answer_dict =  {"Q1" : None,
                "Q2" : None,
                "Q3" : None,
                "Q4" : None,
                "Q5" : None,
                "Q6" : None,
                "Q7" : None}

"""##Reading the dataset
#####An example is provided to read the dataset using [pandas](https://pandas.pydata.org/), while we reccommend using pandas you may use any python library to solve this challenge. 
"""

import pandas as pd
import numpy as np
url='https://drive.google.com/file/d/1PCJ7ltluquoXKi6MYTPMfwZQNI_-MIFP/view?usp=sharing'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url)

df.head()

df.info()

"""##Q1. What is the average CO2 emmission per gram/mile of all Volkswagen cars?

##### Format: A floating number
##### Example answer:
 `11.547`
"""

########## Q1
#Your code here

#Example answer:
#answer_dict["Q1"] =  11.547
df_Q1 = df[df['Make'].str.contains('Volkswagen')] #Get only VW cars
Q1 = df_Q1["CO2 Emission Grams/Mile"].mean()      #Calculate the mean
answer_dict["Q1"] =  Q1

"""##Q2. Calculate the top 5 brands(Make) with the most unique models, order your answer in descending order with respect to the number of unique models.
##### **NOTE:** Consider only the name of the models and their brand, that is use only the Make and Model columns
##### Format: A 5X2 list with each row being the name of the brand followed by the unique number of models, in descending order.
#####Hint: You can use the pandas [df.values.tolist()](https://pandas.pydata.org/docs/reference/api/pandas.Series.tolist.html) function to format your answer.

##### Example answer: 
`[["Volkswagen", 1000], ["Toyota", 900], ["Honda", 800], ["Subaru", 700], ["Ford", 600]]`
"""

########## Q2
#Your code here

#Example answer:
#answer_dict["Q2"] =  [["Volkswagen", 1000], ["Toyota", 900], ["Honda", 800], ["Subaru", 700], ["Ford", 600]] 

df_Q2 = df[['Make', 'Model']] #Select only Make and Model columns for performace and memory space
Q2 = df_Q2.groupby('Make').count() #Get the number of unique models per brand
Q2 = Q2.sort_values(by ='Model', ascending=False).reset_index() #Sort the column Model
Q2 = Q2.iloc[0:5] #Select the first 5 brands
Q2= Q2.values.tolist() #Formating the data
answer_dict["Q2"] =  Q2

"""##Q3. What are all the different types of fuels in the dataset sorted alphabetically?
##### Format: A list of strings sorted alphabetically.
##### Example Answer: 
`['Regular',
 'Premium']`
"""

########## Q3
#Your code here

#Example answer:
#answer_dict["Q3"] =  ['Regular', 'Premium'] 

#Q3
Q3 = []
df_Q3 = df[['Fuel Type']] #Selecting only Fuel type for performance
df_Q3 = df_Q3.groupby("Fuel Type").count().reset_index() #Grouping by fuel type
df_Q3 = df_Q3.sort_values(by = 'Fuel Type', ascending = True) #Sorting
index = df_Q3.shape[0]
for i in range(1,index-1,1): #creating the final list with results
     Q3.append(df_Q3.iloc[i,0])
answer_dict["Q3"] =  Q3

"""##Q4. Show the 9 Toyota cars with the most extreme Fuel Barrels/Year in abosolute terms within all Toyota cars. Show the car Model, Year and their Fuel Barrels/Year in standard deviation units([Z-score](https://fredclavel.org/2019/03/18/basics-standardization-and-the-z-score/)) **sorted** in descending order by their Fuel Barrels/Year in absolute terms first and then by year in descending order **BUT** without modifying the negative values (see example).

##### Format: A 9X3 list with each row containing the Model, Year and Fuel Barrels/Year in standard deviations units

##### Example answer: 
```
[['DJ Po Vehicle 2WD', 2004, -6.407431084026927],
 ['FJ8c Post Office', 2003, -6.407431084026927],
 ['Post Office DJ5 2WD', 2005, -6.391684618442447],
 ['Sierra 2500 Hd 2WD', 2002, -6.391684618442447],
 ['Camry CNG', 2012, 2.677633075759575],
 ['Sierra 1500 4WD', 2005, 2.677633075759575],
 ['Sierra 1500 4WD', 2001, 2.677633075759575],
 ['V15 Suburban 4WD', 1988, 2.677633075759575],
 ['V15 Suburban 4WD', 1987, 2.677633075759575]]
```
#####Note that while the list is sorted by the Fuel Barrels/Year in absolute terms and in standard deviation units, the values are not modified. If the values are the same the rows are sorted by the year.

"""

########## Q4
#Your code here

df_Q4 = df[df['Make'].str.contains('Toyota')] #Filter by Toyota
df_Q4_std = df_Q4.groupby(['Model','Year'])['Fuel Barrels/Year'].std().reset_index() #Grouping 
Q4 = (df_Q4_std.assign(A = df_Q4_std['Fuel Barrels/Year'].abs())
        .sort_values(['A','Year'],ascending=[False, False])
        .drop('A', axis=1)) #creating an auxiliary column to sort in abs, then finally droping the aux column 
Q4 = Q4.iloc[0:9] #Select the first 9 cars
Q4= Q4.values.tolist() #Formating the data
answer_dict["Q4"] =  Q4

"""##Q5. Calculate the changes in Combined MPG with their previous model of all Golf cars with Manual 5-spd transmission and Regular Fuel Type. Show the Year, the Combined MPG and the calculated difference of MPG in a list sorted by Year in ascending order.

##### Format: A 19X3 list, with the Year and Combined MPG being of type integer **and only the calculated difference is of type float**
##### **Note: The value for the first model should be 0.** It does not matter that there are gaps in the years, calculate with respect the previous model.

#####Example answer:



```
[[1986, 25, 0.0],
 [1987, 25, 0.0],
 [1988, 25, 0.0],
 [1989, 25, 0.0],
 [1990, 23, -2.0],
 [1991, 23, 0.0],
 [1992, 24, 1.0],
 [1993, 25, 1.0],
 [1994, 25, 0.0],
 [1995, 25, 0.0],
 [1996, 25, 0.0],
 [1997, 25, 0.0],
 [1998, 24, -1.0],
 [1999, 25, 1.0],
 [2000, 24, -1.0],
 [2001, 24, 0.0],
 [2002, 24, 0.0],
 [2004, 24, 0.0],
 [2006, 24, 0.0]]
```




"""

########## Q5
#Your code here
df_Q5 = df[df['Model'] == 'Golf'] #Get only Golfs model cars since instructions does not mention variants on golf cars
df_Q5 = df_Q5.loc[((df_Q5['Transmission'] == 'Manual 5-spd') & (df_Q5['Fuel Type'] == 'Regular'))] # Completing the filter
df_Q5 = df_Q5.sort_values(by = 'Year', ascending=True) #Sorting by Year
df_Q5 = df_Q5.assign(Difference = 0) #Add a new column for the diference
df_Q5 = df_Q5.drop(df_Q5.columns[[0,1,3,4,5,6,7,8,9,11,12,13,14]], axis=1).reset_index(drop=True) #Drop unnecessary columns 
df_Q5['Difference'] = df_Q5['Difference'].astype(float)
index = df_Q5.shape[0]
for i in range(1,index-1,1): #calculating the difference
    df_Q5.iloc[i,2] = df_Q5.iloc[i,1] - df_Q5.iloc[(i-1),1]
Q5 = list(list(x) for x in zip(*(df_Q5[x].values.tolist() for x in df_Q5.columns))) #Transforming the DF into list
answer_dict["Q5"] =  Q5

"""##Q6. What are the top 5 lowest CO2 Emission Grams/Mile emmisions of cars for each of the following brands: Toyota, Ford, Volkswagen, Nissan, Honda

#####Format: A 5X6 list with the first element of each row being the Make of the cars and the following five values being floats sorted in ascending order. The Makes should appear in order listed in the question starting with Toyota and ending with Honda (see example).

#####Example answer:

```
[['Toyota', 100.0, 140.0, 140.0, 150.0, 150.0],
 ['Ford',
  100.025641025641,
  200.677633075759575,
  200.677633075759575,
  200.677633075759575,
  200.677633075759575],
 ['Volkswagen', 139.0, 154.0, 166.5, 166.5, 166.5],
 ['Nissan', 122.0, 122.0, 122.0, 122.0, 160.0],
 ['Honda', 100.0, 100.0, 100.0, 100.0, 123.91684618442447]]
```





"""

########## Q6
#Your code here
Q6 = []
toyotaList = ['Toyota']
fordList = ['Ford']
volkswagenList = ['Volkswagen']
nissanList = ['Nissan']
hondaList = ['Honda']
df_Q6 = df.loc[((df['Make'] == 'Toyota') | (df['Make'] == 'Ford') | (df['Make'] == 'Volkswagen') | (df['Make'] == 'Nissan') | (df['Make'] == 'Honda'))] #Selecting the requesting brands
df_Q6 = df_Q6.drop(df_Q6.columns[[1,2,3,4,5,6,7,8,9,10,11,12,14]], axis=1) #Dropping unnecesary columns
df_Q6 = df_Q6.sort_values('CO2 Emission Grams/Mile',ascending = True).groupby('Make').head(5) #Selecting less 5 emmition values carrs
df_Q6 = df_Q6.sort_values(['Make','CO2 Emission Grams/Mile'],ascending=[False,True])
array_Q6 = df_Q6.values #vectorizing dataframe for to speed up the analysis
for i in range (len(array_Q6)):
    if array_Q6[i,0] == "Toyota": toyotaList.append(array_Q6[i,1])
    if array_Q6[i,0] == "Ford": fordList.append(array_Q6[i,1])
    if array_Q6[i,0] == "Volkswagen": volkswagenList.append(array_Q6[i,1])
    if array_Q6[i,0] == "Nissan": nissanList.append(array_Q6[i,1])
    if array_Q6[i,0] == "Honda": hondaList.append(array_Q6[i,1])
Q6.append(toyotaList)
Q6.append(fordList)
Q6.append(volkswagenList)
Q6.append(nissanList)
Q6.append(hondaList)
answer_dict["Q6"] =  Q6

"""##Q7. Form 7 groups of 5 years to calculated the median Combined MPG of each group. The first group is from 1984 to 1988, the second from 1989 to 1993 and so on. The last group will have years not appearing in the dataset.

#####Note: The groups ranges are inclusive on both sides, the first group starts with 1984 and cars from 1984 are included in it.
#####Format : A 7X2 list with the first element of each row being a tuple of two integers being the lower and uppper range of the year groups and the esecond element being the median Combined MPG of that group, a float number.

#####Example answer:


```
[[(1984, 1988), 11.0],
 [(1989, 1993), 10.0],
 [(1994, 1998), 10.0],
 [(1999, 2003), 14.0],
 [(2004, 2008), 13.0],
 [(2009, 2013), 14.0],
 [(2014, 2018), 15.0]]
```


"""

########## Q7
#Your code here
yrRanges = [(1984,1988),(1989,1993),(1994,1998),(1999,2003),(2004,2008),(2009,2013),(2014,2018)]
Q7 = []
auxlst = []
ini_year = 1984 #Initial year to start
for i in range(0,7):
    df_Q7 = df.loc[((df['Year'] >= ini_year) & (df['Year'] <= ini_year + 4))] #Creating a df with the range of years requested and creating the list
    Q7mean = df_Q7["Combined MPG"].mean() #Calculating the list of the current group
    auxlst.append(yrRanges[i]) #Creating the final list with results
    auxlst.append(Q7mean)
    Q7.append(auxlst)
    auxlst = [] #Reset the auxiliar list
    ini_year += 5 #increasing the beginning of the next range

answer_dict["Q7"] =  Q7

"""##Test your answers

##### We provide you some tests to make sure your answer dictionary is in the correct format using unittest.
##### These tests are not meant to be comprehensive, you should review all your answers carefully.
"""

import unittest

class TestAnswers(unittest.TestCase):
    def test_if_dict(self):
        self.assertIsInstance(answer_dict, dict)

    def test_keys(self):
        self.assertEqual(list(answer_dict.keys()), ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6', 'Q7'])

    def test_answers_types(self):
        types_values = [type(k) for k in answer_dict.values()]
        answer_types = [float, list, list, list, list, list, list]
        self.assertEqual(types_values, answer_types)

    def test_Q1(self):
        self.assertEqual(type(answer_dict['Q1']), float)

    def test_Q2_dim(self):
        self.assertEqual(np.array(answer_dict['Q2']).shape, (5,2))

    def test_Q2_types(self):
        dtype1 = type(answer_dict['Q2'][0][0])
        dtype2 = type(answer_dict['Q2'][0][1])
        self.assertEqual([dtype1, dtype2], [str, int])

    def test_Q3_types(self):
        q3_types = set([type(item) for item in answer_dict['Q3']])
        self.assertEqual(q3_types, {str})

    def test_Q4_dim(self):
        self.assertEqual(np.array(answer_dict['Q4']).shape, (9,3))

    def test_Q4_types(self):
        dtype1 = type(answer_dict['Q4'][0][0])
        dtype2 = type(answer_dict['Q4'][0][1])
        dtype3 = type(answer_dict['Q4'][0][2])
        self.assertEqual([dtype1, dtype2, dtype3], [str, int, float])

    def test_Q5_dim(self):
        self.assertEqual(np.array(answer_dict['Q5']).shape, (19,3))

    def test_Q5_types(self):
        dtype1 = type(answer_dict['Q5'][0][0])
        dtype2 = type(answer_dict['Q5'][0][1])
        dtype3 = type(answer_dict['Q5'][0][2])
        self.assertEqual([dtype1, dtype2, dtype3], [int, int, float])

    def test_Q5_first_zero(self):
        self.assertEqual(answer_dict['Q5'][0][2], 0)


    def test_Q6_dim(self):
        self.assertEqual(np.array(answer_dict['Q6']).shape, (5,6))

    def test_Q6_types(self):
        dtype1 = type(answer_dict['Q6'][0][0])
        dtype2 = type(answer_dict['Q6'][0][1])
        dtype3 = type(answer_dict['Q6'][0][2])
        dtype4 = type(answer_dict['Q6'][0][3])
        dtype5 = type(answer_dict['Q6'][0][4])
        dtype6 = type(answer_dict['Q6'][0][5])
        self.assertEqual([dtype1, dtype2, dtype3, dtype4, dtype5, dtype6], [str, float, float, float, float, float])

    def test_Q6_check_first_and_last_brand(self):
        first_brand = answer_dict['Q6'][0][0]
        last_brand = answer_dict['Q6'][4][0]

        self.assertEqual([first_brand, last_brand], ["Toyota", "Honda"])

    def test_Q7_dim(self):
        self.assertEqual(np.array(answer_dict['Q7'], dtype=object).shape, (7,2))

    def test_Q7_types(self):
        dtype1 = type(answer_dict['Q7'][0][0])
        dtype2 = type(answer_dict['Q7'][0][1])
        self.assertEqual([dtype1, dtype2], [tuple, float])

unittest.main(argv=[''], verbosity=2, exit=False)

"""##Save your answers


##### First, take a moment to evaluate your answers and make sure you have not missed anything

##### Use the following code to save your answers in pickle format, change the filename using the following format:
##### FIRSTNAME_LASTNAME_answers.pkl
##### Example: Juan_Perez_answers.pkl

##### If you are using google colab you can find your file on the left side bar by clicking the folder icon inside the sample_data folder. Remember to upload the pickle file and the notebook to github and submit their URLs to the [google form](https://forms.gle/wWysZEMkoZsjB11Y7).
"""

answer_dict

import pickle

file_name = "Jose_de_Jesus_Sepulveda_Cisneros_answers.pkl"
path = ""

with open(path+file_name, 'wb') as f:
    pickle.dump(answer_dict, f, protocol=pickle.HIGHEST_PROTOCOL)